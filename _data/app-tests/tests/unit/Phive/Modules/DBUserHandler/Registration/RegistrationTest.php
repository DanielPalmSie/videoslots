<?php

namespace Tests\Unit\Phive\Modules\DBUserHandler\Registration;

require_once __DIR__ . '/Step1TraitClass.php';

use Helper\AppHelper;
use Tests\Unit\Phive\Modules\DBUserHandler\Registration\Step1TraitClass;    // Dummy class which includes the trait we are testing.

/**
 * Class RegistrationTest
 * @package Tests\Unit\Registration
 *
 * Tests the /phive/modules/DBUserHandler/Registration/Step1FieldsTrait.php by using a dummy class which includes the trait.
 *
 * See https://codeception.com/quickstart for introduction.
 * Usage: php vendor/bin/codecept run unit Phive/Modules/DBUserHandler/Registration:testNoGetFieldErrors
 */
class RegistrationTest extends \Codeception\Test\Unit
{
    /**
     * Tests the getStep1Fields method.
     * Step1FieldsTrait::getStep1Fields($country) should return the form fields according to the $country argument,
     * but the method implementation appears to override the $country argument with the IpBlock.config.php setting.
     * Should getStep1Fields($country) work like this or not??
     *
     * @param array $data_provider_request. The array of input data generated by the data provider.
     * @param array $data_provider_response. The array of expected response data generated by the data provider.
     *
     * @dataProvider dataProviderGetStep1Fields
     */
    public function testNoGetFieldErrors($data_provider_request, $data_provider_response)
    {
        /**
         * Calls the method we are testing.
         * Step1FieldsTrait::getStep1Fields expects some values to already be in $_SESSION and $_POST.
         * Peter explained that it also expects phive('Licensed')->forceCountry($country) was called previously.
         */
        $this->setPostValues($data_provider_request);
        phive('Licensed')->forceCountry($data_provider_request['country']);
        $response = Step1TraitClass::getStep1Fields($data_provider_request['country']);

        $this->assertTrue(is_array($response), "Invalid response. Expected an array but received " . gettype($response));

        /**
         * Verifies the response contains all expected fields.
         */
        $missingKeys = array_diff($data_provider_response, array_keys($response));
        $this->assertTrue(
            empty($missingKeys),
            sprintf(
                "Did not receive these fields for country %s: %s. Check IpBlock.config?",
                $data_provider_request['country'],
                implode(', ', $missingKeys)
            ));

        /**
         * Verifies the response does not contain unexpected fields.
         */
        $unexpectedKeys = array_diff(array_keys($response), $data_provider_response);
        $this->assertTrue(
            empty($unexpectedKeys),
            sprintf(
                "Did not expect to receive these fields for country %s: %s. Check IpBlock.config?",
                $data_provider_request['country'],
                implode(', ', $unexpectedKeys)
        ));
    }

    /**
     * Tests the validateStep1Fields method.
     *
     * @param array $data_provider_request. The array of input data generated by the data provider.
     * @param array $data_provider_response. The array of expected response data generated by the data provider.
     *
     * @dataProvider dataProviderNoValidationErrors
     */
    public function testNoValidationErrors($data_provider_request, $data_provider_response)
    {
        /**
         * Calls the method we are testing, which expects $_POST values for its validations to succeed.
         */
        $this->setPostValues($data_provider_request);
        phive('Licensed')->forceCountry($data_provider_request['country']);
        $response = Step1TraitClass::validateStep1Fields($data_provider_request, $data_provider_request['country']);

        $this->assertTrue(is_array($response), "Invalid response. Expected an array but received " . gettype($response));
        $this->assertEmpty(
            $response,
            sprintf("Did not expect any errors but received: %s.", var_export($response, true))
        );
    }

    /**
     * Tests the validateStep1Fields() method.
     *
     * @param array $data_provider_request. The array of input data generated by the data provider.
     * @param array $data_provider_response. The array of expected response data generated by the data provider.
     *
     * @dataProvider dataProviderExpectedValidationErrors
     */
    public function testExpectedValidationErrors($data_provider_request, $data_provider_response)
    {
        /**
         * Calls the method we are testing, which expects $_POST values for its validations to succeed.
         */
        $this->setPostValues($data_provider_request);
        phive('Licensed')->forceCountry($data_provider_request['country']);
        $response = Step1TraitClass::validateStep1Fields($data_provider_request, $data_provider_request['country']);

        $this->assertTrue(is_array($response), "Invalid response. Expected an array but received " . gettype($response));

        /**
         * Verifies the response contains all expected errors.
         */
        foreach ($data_provider_response as $expected_key => $expected_value) {
            $this->assertTrue(
                array_key_exists($expected_key, $response),
                "Did not receive any errors for [{$expected_key}] but expected [{$expected_value}]."
            );
            $this->assertEquals(
                $expected_value,
                $response[$expected_key] ?? '',
                "Expected a different error message for [{$expected_key}]. Expected '{$response[$expected_key]}' but received '{$expected_value}'."
            );
        }

        /**
         * Verifies the response contains no unexpected errors.
         */
        foreach ($response as $response_key => $response_value) {
            $this->assertTrue(
                array_key_exists($response_key, $data_provider_response),
                "Did not expect any errors for [{$response_key}] but received [{$response_value}]."
            );
        }
    }

    /**
     * Tests the validateStep1Fields() method for duplicate data.
     *
     * @param $data_provider_request
     * @param $data_provider_response
     *
     * @dataProvider dataProviderExpectedValidationErrorsForDuplicates
     */
    public function testExpectedValidationErrorsForDuplicates($data_provider_request, $data_provider_response)
    {
        /**
         * Inserts a user with the specified email to make sure we get a duplicate email error.
         */
        $user_id = $this->insertDbUserForTestingDuplicateEmail($data_provider_request);

        /**
         * Calls the method we are testing, which expects $_POST values for its validations to succeed.
         */
        $this->setPostValues($data_provider_request);
        phive('Licensed')->forceCountry($data_provider_request['country']);
        $response = Step1TraitClass::validateStep1Fields($data_provider_request, $data_provider_request['country']);

        /**
         * Immediately clean up by removing the user inserted for testing purposes.
         */
        $this->deleteInsertedUser($user_id);

        $this->assertTrue(is_array($response), "Invalid response. Expected an array but received " . gettype($response));

        /**
         * Verifies the response contains all expected errors.
         */
        foreach ($data_provider_response as $expected_key => $expected_value) {
            $this->assertTrue(
                array_key_exists($expected_key, $response),
                "Did not receive any errors for [{$expected_key}] but expected [{$expected_value}]."
            );
            $this->assertEquals(
                $expected_value,
                $response[$expected_key] ?? '',
                "Expected a different error message for [{$expected_key}]. Expected '{$response[$expected_key]}' but received '{$expected_value}'."
            );
        }

        /**
         * Verifies the response contains no unexpected errors.
         */
        foreach ($response as $response_key => $response_value) {
            $this->assertTrue(
                array_key_exists($response_key, $data_provider_response),
                "Did not expect any errors for [{$response_key}] but received [{$response_value}]."
            );
        }
    }

    /**
     * @param array $request
     * @return int|null The user ID (db.users.id) or null if a user with this email already exists.
     */
    private function insertDbUserForTestingDuplicateEmail(array $request)
    {
        $user_id = $this->getUserForTestingDuplicateEmail($request);
        if ($user_id) {
            return null;
        }

        $factory_attributes = AppHelper::makeDbUser();
        $attributes = array_merge($factory_attributes, array_intersect_key($request, $factory_attributes));
        $attributes['password'] = phive('DBUserHandler')->encryptPassword($attributes['password']);

        $attributes['id'] = phive('SQL')->insertArray('users', $attributes);
        if ($attributes['id'] && phive('SQL')->isSharded('users')) {
            phive('SQL')->sh($attributes['id'])->insertArray('users', $attributes);
        }

        return $attributes['id'];
    }

    /**
     * @param $request
     * @return array|null The db.users row for the specified email, or null if not found.
     */
    private function getUserForTestingDuplicateEmail($request)
    {
        $email = phive('SQL')->escape($request['email'], false);
        $sql = "SELECT id FROM users WHERE email = '{$email}'";
        return AppHelper::dbSelect($sql);
    }

    /**
     * Deletes the user from db.users in both the shard and the master table.
     * @param int|null $user_id
     */
    private function deleteInsertedUser(int $user_id = null)
    {
        if ($user_id) {
            phive('SQL')->delete('users', ['id' => $user_id], $user_id);
            phive('SQL')->delete('users', ['id' => $user_id]);
        }
    }

    /**
     * Sets the $_POST values.
     *
     * @param array $input
     */
    private function setPostValues(array $input)
    {
        if (empty($input)) {
            return;
        }

        foreach ($input as $k => $v) {
            $_POST[$k] = $v;
            $_SESSION['rstep1'][$k] = $v;
        }

        $_POST['referring_friend'] = null;
        $_REQUEST['country'] = $input['country'];
    }

    /**
     * Data provider for the testNoGetFieldErrors test, which is called once for each item in the returned array.
     * We are sending 2 parameters to the testNoGetFieldErrors method: an array of input data and an array with the expected response.
     * The key for each item is displayed in the test output for readability.
     *
     * @return array
     */
    public function dataProviderGetStep1Fields()
    {
        $default_response = [
            'country',
            'country_prefix',
            'email',
            'mobile',
            'password',
        ];

        return [
            'MT' => [
                'request' => ['country' => 'MT'],
                'response' => $default_response,
            ],

            'SE' => [
                'request' => ['country' => 'SE'],
                'response' => array_diff($default_response, ['password']),
            ],

            'DK' => [
                'request' => ['country' => 'DK'],
                'response' => $default_response,
            ],

            'GB' => [
                'request' => ['country' => 'GB'],
                'response' => $default_response,
            ],

            'IT' => [
                'request' => ['country' => 'IT'],
                'response' => array_merge(
                    $default_response,
                    [
                        'security_question',
                        'security_answer'
                    ]
                ),
            ],

            'XX' => [
                'request' => ['country' => 'XX'],
                'response' => $default_response,
            ],
        ];
    }

    /**
     * Data provider for the testNoValidationErrors test, which is called once for each item in the returned array.
     * We are sending 2 parameters to the testNoValidationErrors method: an array of input data and an array with the expected response.
     *
     * @return array
     */
    public function dataProviderNoValidationErrors()
    {
        $default_request = [
            'country' => 'MT',
            'country_prefix' => '356',
            'email' => 'devtest123@devtest.com',
            'mobile' => '912345',
            'password' => 'Abc123456',
            'privacy' => 1,
            'conditions' => 1,
        ];

        return [
            'MT' => [
                'request' => $default_request,
                'response' => [],
            ],

            'SE' => [
                'request' => array_merge($default_request, [
                    'country' => 'SE',
                    'personal_number' => '198012251234',
                ]),
                'response' => [],
            ],

            'DK' => [
                'request' => array_merge($default_request, [
                    'country' => 'DK',
                    'personal_number' => '198012251234',
                ]),
                'response' => [],
            ],
        ];
    }

    /**
     * Data provider for the testExpectedValidationErrors test, which is called once for each item in the returned array.
     * We are sending 2 parameters to the testExpectedValidationErrors method: an array of input data and an array with the expected response.
     *
     * @return array
     */
    public function dataProviderExpectedValidationErrors()
    {
        $default_request = [
            'country' => 'MT',
            'country_prefix' => '356',
            'email' => 'devtest123@devtest.com',
            'mobile' => '912345',
            'password' => 'Abc123456',
            'privacy' => 1,
            'conditions' => 1,
        ];

        return [
            'missing_conditions_and_privacy' => [
                'request' => array_diff_key($default_request, array_flip(['privacy', 'conditions'])),
                'response' => [
                    'privacy' => "Needs to be checked",
                    "conditions" => "Needs to be checked",
                ],
            ],

            'password_too_short' => [
                'request' => array_merge($default_request, [
                    'password' => 'A',
                ]),
                'response' => [
                    'password' => "(short)",
                ],
            ],
        ];
    }

    /**
     * Data provider.
     *
     * @return array[]
     */
    public function dataProviderExpectedValidationErrorsForDuplicates()
    {
        $default_request = [
            'country' => 'MT',
            'country_prefix' => '356',
            'email' => 'devtest25@devtest.com',
            'mobile' => '912345',
            'password' => 'Abc123456',
            'privacy' => 1,
            'conditions' => 1,
        ];

        return [
            'duplicate_email_MT' => [
                'request' => $default_request,
                'response' => [
                    'email' => "Error: Email taken",
                ],
            ],
        ];
    }
}
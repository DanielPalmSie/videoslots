<?php
/**
 * Created by PhpStorm.
 * User: ricardo
 * Date: 4/20/16
 * Time: 12:28 PM
 */

namespace App\Commands;

use Carbon\Carbon;
use Ivoba\Silex\Command\Command;
use PHPExcel;
use PHPExcel_IOFactory;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

use App\Extensions\Database\FManager as DB;


class FiauCommand extends Command
{
    /** @var  OutputInterface $output */
    protected $output;

    /** @var array $data Stores data in the class to save data over the commands */
    protected $data = [];

    /**
     * 7.4
     * How many alerts were generated by the AML/CFT unit's automated monitoring system that have resulted in investigations in 2018?
     * Note: The number of accounts with at least one ‘AML Risk Score’ note time stamped in 2018
     */
    function do_7_4()
    {
        $result = "
            SELECT count(*) AS c FROM (
                SELECT count(*) AS c FROM users_comments 
                WHERE tag = 'aml-risk-group' 
                  AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59' 
                GROUP BY user_id
            ) AS res WHERE res.c > 0
        ";
        $result = DB::shsSelect('users_comments', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 7.15
     * How many customer relationships were closed for AML/CFT reasons during 2018?
     *
     * Note: The number of accounts with at least one ‘SAR’ or ‘MLRO’ note time stamped in 2018,
     * and blocked or superblocked in 2018, and without self-excluded block status.
     */
    function do_7_15()
    {
        $result = "
            SELECT count(DISTINCT uc.user_id) AS c FROM actions
            LEFT JOIN (
                SELECT DISTINCT target FROM actions 
                WHERE target = actor 
                  AND lower(descr) LIKE '%self%excluded%' 
                  AND tag = 'profile-lock'
                  AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
            ) AS self_excluded ON actions.target = self_excluded.target
            LEFT JOIN (
                SELECT DISTINCT user_id FROM users_comments 
                WHERE tag in ('mlor', 'sar')
                AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
            ) AS uc ON uc.user_id = actions.target
            WHERE self_excluded.target IS NULL 
              AND uc.user_id IS NOT NULL 
              AND actions.tag IN ('super-blocked', 'block')
              AND actions.created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ";
        $result = DB::shsSelect('actions', $result);
        $result = array_sum(array_pluck($result, 'c'));
        return $result;
    }

    /**
     * 7.16
     * How many customers did the institution refuse to onboard or provide services to/assist in transactions for AML/CFT reasons during 2018?
     *
     * Note: The number of blocked or superblocked accounts where the PEP/SL check is not a pass
     */
    function do_7_16()
    {
        $result = "
            SELECT count(DISTINCT actions.target) AS c FROM actions
            LEFT JOIN triggers_log AS tl 
                ON tl.user_id = actions.target 
                   AND trigger_name = 'AML2' 
                   AND tl.created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
            WHERE actions.tag IN ('super-blocked', 'block') 
              AND tl.user_id IS NOT NULL
              AND actions.created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ";
        $result = DB::shsSelect('actions', $result);
        $result = array_sum(array_pluck($result, 'c'));
        return $result;
    }

    /**
     * 7.17
     * What is the total number of customer accounts blocked or suspended/terminated in view of AML/CFT during 2018?
     *
     * Note: The number of accounts with at least one ‘AML Risk Score’, ‘SAR’ or ‘MLRO’ note time stamped in 2018,
     * and blocked or superblocked in 2018, and without self-excluded block status
     */
    function do_7_17()
    {
        $result = "
            SELECT count(DISTINCT uc.user_id) AS c FROM actions
            LEFT JOIN (
                SELECT DISTINCT target FROM actions 
                WHERE target = actor 
                  AND lower(descr) LIKE '%self%excluded%' 
                  AND tag = 'profile-lock'
                  AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
            ) AS self_excluded ON actions.target = self_excluded.target
            LEFT JOIN (
              SELECT distinct user_id FROM users_comments 
              WHERE tag IN ('mlor', 'sar', 'aml-risk-group')
              AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
            ) AS uc ON uc.user_id = actions.target
            WHERE self_excluded.target IS NULL 
              AND uc.user_id IS NOT NULL 
              AND actions.tag IN ('super-blocked', 'block')
              AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ";
        $result = DB::shsSelect('actions', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 7.18
     * What is the total number of customer accounts blocked or suspended/terminated in view of Fraud during 2018?
     *
     * Note: The number of accounts without any ‘SAR’ or ‘MLRO’ note time stamped in 2018,
     * and blocked or superblocked in 2018, and without self-excluded block status
     */
    function do_7_18()
    {
        $result = "
            SELECT count(DISTINCT uc.user_id) AS c FROM actions
            LEFT JOIN (
              SELECT distinct target FROM actions 
              WHERE target = actor 
                AND lower(descr) LIKE '%self%excluded%' 
                AND tag = 'profile-lock'
                AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
            ) AS self_excluded ON actions.target = self_excluded.target
            LEFT JOIN (
              SELECT distinct user_id FROM users_comments 
              WHERE tag NOT IN ('mlor', 'sar')
              AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
            ) AS uc ON uc.user_id = actions.target
            WHERE self_excluded.target IS NULL 
              AND uc.user_id IS NOT NULL 
              AND actions.tag IN ('super-blocked', 'block')
              AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ";
        $result = DB::shsSelect('actions', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 11.21
     * Of the total number of transactions, what percentage were single deposits
     * of €2,000 or more for providers of gambling services in the past 2018?
     */
    function do_11_21()
    {
        $threshold = 2000;
        $total = "
            SELECT count(*) AS c FROM deposits 
            WHERE timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ";
        $total = DB::shsSelect('deposits', $total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
            SELECT count(*) AS c FROM deposits 
            WHERE ROUND(amount / 100, 2) >= {$threshold} 
              AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 11.22
     * Of the total number of customers, what percentage of customers submitted single deposits
     * of €2,000 or more for providers of gambling services in 2018?
     */
    function do_11_22()
    {
        $threshold = 2000;
        $total = "
            SELECT count(*) AS c FROM users 
            WHERE register_date <= date('2018-12-18 23:59:59')
        ";
        $total = DB::getMasterConnection()->select($total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
            SELECT count(*) AS c FROM (
                select user_id FROM deposits 
                WHERE ROUND(amount / 100, 2) >= {$threshold} 
                  AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59' 
                GROUP BY user_id
            ) AS result
        ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 11.23
     * Of the total number of transactions, what percentage were transactions that met the €2,000 threshold within 180 days (cumulative)?
     * 11.24
     * Of the total number of customers, what percentage of customers met the €2,000 threshold within 180 days (cumulative)?
     *
     * we'll consider 6 months = 180 days
     */
    function do_11_23_24()
    {
        $threshold = 2000;

        $total_users = "SELECT count(*) as c FROM users WHERE register_date <= date('2018-12-18 23:59:59')";
        $total_users = DB::getMasterConnection()->select($total_users);
        $total_users = array_sum(array_pluck($total_users,'c'));

        $result = "
            SELECT user_id, month, transactions, ROUND(amount / 100, 2) as amount FROM users_monthly_liability 
            RIGHT JOIN users on user_id = users.id and register_date <= date('2018-12-18 23:59:59')
            WHERE year = 2018 AND main_cat = 1
        ";
        $result = DB::getMasterConnection()->select($result);

        $total_transactions = 0;

        $users_transactions = [];
        foreach ($result as $item) {
            $item = (array)$item;
            if (empty($users_transactions[$item['user_id']])) {
                $users_transactions[$item['user_id']] = [];
            }
            $users_transactions[$item['user_id']][] = $item;
            $total_transactions += (int)$item['transactions'];
        }

        $no_transactions = 0;
        $no_users = 0;

        foreach ($users_transactions as $user => $transactions) {
            $end = 12;
            $interval_start = 1;
            $interval_end = $interval_start + 6;
            $list_length = count($transactions);

            while ($interval_end <= $end) {
                $sum = 0;
                $count = 0;
                $found = false;
                for ($i = 0; $i < $list_length; $i++) {
                    $deposit = (array)$transactions[$i];

                    $deposit_time = $deposit['month'];
                    if ($interval_start <= $deposit_time && $deposit_time <= $interval_end) {
                        $sum += (float)$deposit['amount'];
                        $count += (int)$deposit['transactions'];
                    }
                    $found = $sum >= $threshold;
                    if ($found) {
                        $no_transactions += $count;
                        $no_users += 1;

                        $i = $list_length+1;
                        $interval_end = $end+1;
                    }
                }

                if (!$found) {
                    $interval_start += 1;
                    $interval_end = $interval_start + 6;
                }
            }
        }

        return [$no_transactions * 100 / $total_transactions, $no_users * 100 / $total_users];
    }

    /**
     * 11.31
     * What is the percentage of the total volume and value activity that was cross-jurisdictional activity
     * with EU or EEA jurisdictions (for instance, via foreign holding accounts)
     *
     * Total Percentage of Player Deposits (i.e., % of Total Value)
     *
     * Note: EW: Deposits by customers in [countries] as a percentage of total deposits by all customers
     */
    function do_11_31()
    {
        $map = [
            'AT',
            'BE',
            'BG',
            'CY',
            'CZ',
            'DK',
            'EE',
            'FI',
            'FR',
            'DE',
            'GR',
            'HU',
            'IE',
            'IS',
            'IT',
            'LI',
            'LV',
            'LT',
            'LU',
            'MT',
            'NL',
            'NO',
            'PL',
            'PT',
            'RO',
            'SK',
            'SI',
            'ES',
            'SE',
            'GB'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "select count(*) as c from deposits";
        $total = DB::shsSelect('deposits', $total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT count(*) AS c FROM deposits
        LEFT JOIN users ON users.id = user_id
        WHERE users.country IN $countries
        AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 11.32
     * What is the percentage of the total volume and value activity that was cross-jurisdictional activity
     * with EU or EEA jurisdictions (for instance, via foreign holding accounts)
     *
     * Total Percentage of Winnings for Operator (i.e., % of Total Value)
     *
     * Note: EW: Deposits by customers in [countries] as a percentage of total deposits by all customers
     */
    function do_11_32()
    {
        $map = [
            'AT',
            'BE',
            'BG',
            'CY',
            'CZ',
            'DK',
            'EE',
            'FI',
            'FR',
            'DE',
            'GR',
            'HU',
            'IE',
            'IS',
            'IT',
            'LI',
            'LV',
            'LT',
            'LU',
            'MT',
            'NL',
            'NO',
            'PL',
            'PT',
            'RO',
            'SK',
            'SI',
            'ES',
            'SE',
            'GB'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "select sum(ROUND(amount / 100, 2)) as c from wins";
        $total = DB::shsSelect('wins', $total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT sum(ROUND(amount / 100, 2)) AS c FROM wins
        LEFT JOIN users ON users.id = user_id
        WHERE users.country IN $countries
        AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
    ";
        $result = DB::shsSelect('wins', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 11.33
     * What is the percentage of the total volume and value activity that was cross-jurisdictional activity
     * with EU or EEA jurisdictions (for instance, via foreign holding accounts)
     *
     * Total Percentage of Deposits (% of Total Volume)
     *
     * Note: EW: Deposits by customers in [countries] as a percentage of total deposits by all customers
     */
    function do_11_33()
    {
        $map = [
            'AT',
            'BE',
            'BG',
            'CY',
            'CZ',
            'DK',
            'EE',
            'FI',
            'FR',
            'DE',
            'GR',
            'HU',
            'IE',
            'IS',
            'IT',
            'LI',
            'LV',
            'LT',
            'LU',
            'MT',
            'NL',
            'NO',
            'PL',
            'PT',
            'RO',
            'SK',
            'SI',
            'ES',
            'SE',
            'GB'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "select count(*) as c from deposits";
        $total = DB::shsSelect('deposits', $total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT count(*) AS c FROM deposits
        LEFT JOIN users ON users.id = user_id
        WHERE users.country IN $countries
        AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 11.34
     * Of the total cross border activity conducted, what is the volume and value
     * of cross-jurisdictional activity with high risk jurisdictions,
     * as defined by the institution's policies and procedures (for instance, via foreign holding accounts)
     *
     * Total Percentage of Player Deposits (i.e., % of Total Value)
     *
     * Note: EW: Deposits by customers in [countries], as a percentage of total deposits by all customers
     */
    function do_11_34()
    {
        $map = [
            'AF',
            'AS',
            'BS',
            'BW',
            'KP',
            'ET',
            'GH',
            'GU',
            'IR',
            'IQ',
            'LY',
            'NG',
            'PK',
            'PA',
            'PR',
            'WS',
            'SA',
            'LK',
            'SY',
            'TT',
            'TN',
            'VI',
            'YE'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "select sum(ROUND(amount / 100, 2)) as c from deposits";
        $total = DB::shsSelect('deposits', $total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT sum(ROUND(amount / 100, 2)) AS c FROM deposits
        LEFT JOIN users ON users.id = user_id
        WHERE users.country IN $countries
        AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 11.35
     * Of the total cross border activity conducted, what is the volume and value
     * of cross-jurisdictional activity with high risk jurisdictions,
     * as defined by the institution's policies and procedures (for instance, via foreign holding accounts)
     *
     * Total Percentage of Winnings for Operator (i.e., % of Total Value)
     *
     * Note: EW: Deposits by customers in [countries], as a percentage of total deposits by all customers
     */
    function do_11_35()
    {
        $map = [
            'AF',
            'AS',
            'BS',
            'BW',
            'KP',
            'ET',
            'GH',
            'GU',
            'IR',
            'IQ',
            'LY',
            'NG',
            'PK',
            'PA',
            'PR',
            'WS',
            'SA',
            'LK',
            'SY',
            'TT',
            'TN',
            'VI',
            'YE'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "select sum(ROUND(amount / 100, 2)) as c from wins";
        $total = DB::shsSelect('wins', $total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT sum(ROUND(amount / 100, 2)) AS c FROM wins
        LEFT JOIN users ON users.id = user_id
        WHERE users.country IN $countries
        AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
    ";
        $result = DB::shsSelect('wins', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 11.36
     * Of the total cross border activity conducted, what is the volume and value
     * of cross-jurisdictional activity with high risk jurisdictions,
     * as defined by the institution's policies and procedures (for instance, via foreign holding accounts)
     *
     * Total Percentage of Player Deposits (i.e., % of Total Volume)
     *
     * Note: EW: Deposits by customers in [countries], as a percentage of total deposits by all customers
     */
    function do_11_36()
    {
        $map = [
            'AF',
            'AS',
            'BS',
            'BW',
            'KP',
            'ET',
            'GH',
            'GU',
            'IR',
            'IQ',
            'LY',
            'NG',
            'PK',
            'PA',
            'PR',
            'WS',
            'SA',
            'LK',
            'SY',
            'TT',
            'TN',
            'VI',
            'YE'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "select count(*) as c from deposits";
        $total = DB::shsSelect('deposits', $total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT count(*) AS c FROM deposits
        LEFT JOIN users ON users.id = user_id
        WHERE users.country IN $countries
        AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 11.37
     * Of the total cross border activity conducted, what is the percentage of the volume and value
     * of cross-jurisdictional activity with sanctioned jurisdictions,
     * as defined by the institution's policies and procedures (for instance, via foreign holding accounts)
     *
     * Total Percentage of Player Deposits (i.e., % of Total Value)
     *
     * Note: EW: Deposits by customers in [countries] as a percentage of total deposits by all customers
     */
    function do_11_37()
    {
        $map = [
            'AF',
            'BY',
            'BA',
            'MM',
            'BI',
            'CF',
            'CD',
            'EG',
            'ER',
            'GN',
            'GW',
            'HT',
            'IR',
            'IQ',
            'KP',
            'LB',
            'LY',
            'ML',
            'SO',
            'SS',
            'SD',
            'SY',
            'TN',
            'UA',
            'VE',
            'YE',
            'ZW'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "select count(*) as c from deposits";
        $total = DB::shsSelect('deposits', $total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT count(*) AS c FROM deposits
        LEFT JOIN users ON users.id = user_id
        WHERE users.country IN $countries
        AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 11.38
     * Of the total cross border activity conducted, what is the percentage of the volume and value
     * of cross-jurisdictional activity with sanctioned jurisdictions,
     * as defined by the institution's policies and procedures (for instance, via foreign holding accounts)
     *
     * Total Percentage of Winnings for Operator (i.e., % of Total Value)
     *
     * Note: EW: Deposits by customers in [countries] as a percentage of total deposits by all customers
     */
    function do_11_38()
    {
        $map = [
            'AF',
            'BY',
            'BA',
            'MM',
            'BI',
            'CF',
            'CD',
            'EG',
            'ER',
            'GN',
            'GW',
            'HT',
            'IR',
            'IQ',
            'KP',
            'LB',
            'LY',
            'ML',
            'SO',
            'SS',
            'SD',
            'SY',
            'TN',
            'UA',
            'VE',
            'YE',
            'ZW'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "select sum(ROUND(amount / 100, 2)) as c from wins";
        $total = DB::shsSelect('wins', $total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT sum(ROUND(amount / 100, 2)) AS c FROM wins
        LEFT JOIN users ON users.id = user_id
        WHERE users.country IN $countries
        AND created_at BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
    ";
        $result = DB::shsSelect('wins', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 11.39
     * Of the total cross border activity conducted, what is the percentage of the volume and value
     * of cross-jurisdictional activity with sanctioned jurisdictions,
     * as defined by the institution's policies and procedures (for instance, via foreign holding accounts)
     *
     * Total Percentage of Deposits (% of Total Volume)
     *
     * Note: EW: Deposits by customers in [countries] as a percentage of total deposits by all customers
     */
    function do_11_39()
    {
        $map = [
            'AF',
            'BY',
            'BA',
            'MM',
            'BI',
            'CF',
            'CD',
            'EG',
            'ER',
            'GN',
            'GW',
            'HT',
            'IR',
            'IQ',
            'KP',
            'LB',
            'LY',
            'ML',
            'SO',
            'SS',
            'SD',
            'SY',
            'TN',
            'UA',
            'VE',
            'YE',
            'ZW'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "select count(*) as c from deposits";
        $total = DB::shsSelect('deposits', $total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT count(*) AS c FROM deposits
        LEFT JOIN users ON users.id = user_id
        WHERE users.country IN $countries
        AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 12.1
     * Total number of customers as at 31/12/2018:
     *
     * Customer is defined as natural persons or legal persons/institutions with whom the institution
     * has a business, professional, or commercial relationship or who are involved
     * as parties in executed contracts.
     *
     */
    function do_12_1()
    {

        $result = "SELECT count(*) AS c FROM users WHERE register_date <= date('2018-12-18 23:59:59')";

        $result = DB::getMasterConnection()->select($result);

        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 12.3
     * Of the total (per Question 12.1), what percentage of customers are rated "high risk"?
     */
    function do_12_3()
    {

        $total = "SELECT count(*) AS c FROM users WHERE register_date <= date('2018-12-18 23:59:59')";
        $total = DB::getMasterConnection()->select($total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT count(distinct user_id) as c FROM triggers_log 
        WHERE trigger_name='AML23' 
          AND created_at <= date('2018-12-18 23:59:59')
    ";
        $result = DB::shsSelect('triggers_log', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 12.4
     * Of the total (per Question 12.1), what percentage of customers are rated "medium risk"?
     */
    function do_12_4()
    {
        $total = "SELECT count(*) AS c FROM users WHERE register_date <= date('2018-12-18 23:59:59')";
        $total = DB::getMasterConnection()->select($total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "
        SELECT count(distinct user_id) FROM triggers_log 
        WHERE trigger_name='AML17' 
          AND created_at <= date('2018-12-18 23:59:59')
    ";
        $result = DB::shsSelect('triggers_log', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 12.5
     * Of the total (per Question 12.1), what percentage of customers are rated "low risk"?
     */
    // Solution 100 - (12.3) - (12.4)

    /**
     * 12.7
     * What percentage of the institution's customers are inactive?
     */
    function do_12_7()
    {

        $total = "SELECT count(*) AS c FROM users WHERE register_date <= date('2018-12-18 23:59:59')";
        $total = DB::getMasterConnection()->select($total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "SELECT count(*) AS c FROM users WHERE register_date <= date('2018-12-18 23:59:59') AND active = 0 ";
        $result = DB::getMasterConnection()->select($result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 12.13
     * Please list total number of new customers onboarded during 2018.
     *
     * "Onboarding" refers to the process through which a business relationship is established or an occasional transaction is carried out.
     */
    function do_12_13()
    {
        $result = "SELECT count(*) AS c FROM users WHERE register_date LIKE '2018-%'";
        $result = DB::getMasterConnection()->select($result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 12.20a
     * Bank transfers (EU, EEA or equivalent safeguards)
     *
     * Note: Number of accounts with one or more deposits from Trustly, EnterCash Citadel – Explorer  as a percentage of 12.1
     */
    function do_12_20_a()
    {
        $list = ['trustly', 'entercash', 'citadel'];
        $list = "('" . implode("','", $list) . "')";

        $result = "
        SELECT count(*) AS c FROM (
           SELECT DISTINCT user_id FROM deposits 
           WHERE dep_type IN $list
           AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ) as res                             
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 12.20b
     * Debit/credit cards issued by banks (EU, EEA or equivalent safeguards)
     *
     * Note: Number of accounts with one or more deposits from Wirecard, Adyen (excluding ebanking if you can differentiate), Worldpay, EMP (Mastercard, VISA) as a percentage of 12.1
     */
    function do_12_20_b()
    {
        $list = ['wirecard', 'adyen', 'worldpay', 'emp'];
        $list = "('" . implode("','", $list) . "')";

        $result = "
        SELECT count(*) AS c FROM (
           SELECT DISTINCT user_id FROM deposits 
           WHERE dep_type IN $list 
             AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ) AS res                             
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 12.20d
     * EU- or EEA-licensed payment service providers
     * todo: who is Inpay?
     * Note: Number of accounts with one or more deposits from Inpay, Adyen, Euteller, WireCard, PugglePay, EcoPayz, NETELLER, Skrill (Moneybookers), PAYSAFE Card – EUR, Trustly, EnterCash, EMP, Citadel – Explorer, Flexepin, Neosurf, Worldpay as a percentage of 12.1
     */
    function do_12_20_d()
    {
        $list = [
            'adyen',
            'euteller',
            'wirecard',
            'puggle',
            'ecopayz',
            'neteller',
            'skrill',
            'paysafe',
            'trustly',
            'entercash',
            'emp',
            'citadel',
            'flexepin',
            'neosurf',
            'worldpay'
        ];
        $list = "('" . implode("','", $list) . "')";

        $result = "
        SELECT count(*) AS c FROM  (
           SELECT DISTINCT user_id FROM deposits 
           WHERE dep_type IN $list
             AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ) AS res                             
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 12.20e
     * Non-EU or non-EEA-licensed PSP
     * Note: Number of accounts with one or more deposits from SIRU, SMSBill, Payment IQ, InstaDebit, Interact as a percentage of 12.1
     */
    function do_12_20_e()
    {
        $list = ['siru', 'smsbill', 'paymentiq', 'instadebit', 'interac'];
        $list = "('" . implode("','", $list) . "')";

        $result = "
        SELECT count(*) AS c FROM (
           SELECT DISTINCT user_id FROM deposits 
           WHERE dep_type IN $list
             AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ) AS res                             
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 12.20g
     * Prepaid cards/vouchers
     * Note: Number of accounts with one or more deposits from Paysafecard, Neosurf, Flexepin as a percentage of 12.1
     */
    function do_12_20_g()
    {
        $list = ['paysafe', 'neosurf', 'flexepin'];
        $list = "('" . implode("','", $list) . "')";

        $result = "
        SELECT count(*) AS c FROM (
           SELECT DISTINCT user_id FROM deposits 
           WHERE dep_type IN $list
             AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ) AS res                             
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 12.20k
     * Online "wallet" facility (account)
     * Note: Number of accounts with one or more deposits from EcoPayz, NETELLER, Skrill (Moneybookers) as a percentage of 12.1
     */
    function do_12_20_k()
    {
        $list = ['ecopayz', 'neteller', 'skrill'];
        $list = "('" . implode("','", $list) . "')";

        $result = "
        SELECT count(*) AS c FROM (
           SELECT DISTINCT user_id FROM deposits 
           WHERE dep_type IN $list
             AND timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-12-31 23:59:59'
        ) AS res                             
    ";
        $result = DB::shsSelect('deposits', $result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result;
    }

    /**
     * 13.1
     * What percentage of customers are domiciled in Malta?
     */
    function do_13_1()
    {
        $total = "SELECT count(*) AS c FROM users WHERE register_date <= date('2018-12-18 23:59:59')";
        $total = DB::getMasterConnection()->select($total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "SELECT count(*) AS c FROM users WHERE country = 'MT' AND register_date <= date('2018-12-18 23:59:59')";
        $result = DB::getMasterConnection()->select($result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 13.2
     * What percentage of customers are foreign and domiciled in an EU or EEA jurisdiction outside Malta?
     */
    function do_13_2()
    {
        $map = [
            'AT',
            'BE',
            'BG',
            'CY',
            'CZ',
            'DK',
            'EE',
            'FI',
            'FR',
            'DE',
            'GR',
            'HU',
            'IE',
            'IS',
            'IT',
            'LI',
            'LV',
            'LT',
            'LU',
            'MT',
            'NL',
            'NO',
            'PL',
            'PT',
            'RO',
            'SK',
            'SI',
            'ES',
            'SE',
            'GB'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "SELECT count(*) AS c FROM users WHERE register_date <= date('2018-12-18 23:59:59')";
        $total = DB::getMasterConnection()->select($total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "SELECT count(*) AS c FROM users WHERE country != 'MT' AND country IN $countries AND register_date <= date('2018-12-18 23:59:59')";
        $result = DB::getMasterConnection()->select($result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 13.3
     * What percentage of customers are foreign and domiciled in a non-EU or non-EEA jurisdiction outside Malta?
     */
    function do_13_3()
    {
        $map = [
            'AT',
            'BE',
            'BG',
            'CY',
            'CZ',
            'DK',
            'EE',
            'FI',
            'FR',
            'DE',
            'GR',
            'HU',
            'IE',
            'IS',
            'IT',
            'LI',
            'LV',
            'LT',
            'LU',
            'MT',
            'NL',
            'NO',
            'PL',
            'PT',
            'RO',
            'SK',
            'SI',
            'ES',
            'SE',
            'GB'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $result = "SELECT count(*) AS c FROM users WHERE country != 'MT' AND country NOT IN $countries AND register_date <= date('2018-12-18 23:59:59')";
        $result = DB::getMasterConnection()->select($result);
        $result = array_sum(array_pluck($result, 'c'));

        $total = "SELECT count(*) AS c FROM users WHERE register_date <= date('2018-12-18 23:59:59')";
        $total = DB::getMasterConnection()->select($total);
        $total = array_sum(array_pluck($total, 'c'));

        return $result * 100 / $total;
    }

    /**
     * 13.4
     * What percentage of customers are domiciled in a high risk jurisdiction (as defined by the institution's policies and procedures)?
     */
    function do_13_4()
    {
        $map = [
            'AF',
            'AS',
            'BS',
            'BW',
            'KP',
            'ET',
            'GH',
            'GU',
            'IR',
            'IQ',
            'LY',
            'NG',
            'PK',
            'PA',
            'PR',
            'WS',
            'SA',
            'LK',
            'SY',
            'TT',
            'TN',
            'VI',
            'YE'
        ];
        $countries = "('" . implode("','", $map) . "')";

        $total = "SELECT count(*) AS c FROM users WHERE register_date <= date('2018-12-18 23:59:59')";
        $total = DB::getMasterConnection()->select($total);
        $total = array_sum(array_pluck($total, 'c'));

        $result = "SELECT count(*) AS c FROM users WHERE country IN $countries AND register_date <= date('2018-12-18 23:59:59')";
        $result = DB::getMasterConnection()->select($result);
        $result = array_sum(array_pluck($result, 'c'));

        return $result * 100 / $total;
    }

    protected function configure()
    {
        $this->setName("fiau")
            ->setDescription("This is the FIAU");
    }

    /**
     * @param $filename
     * @param $file_path
     * @param $keys
     * @param $contacts
     *
     * @return string
     * @throws \PHPExcel_Exception
     * @throws \PHPExcel_Reader_Exception
     * @throws \PHPExcel_Writer_Exception
     */
    private function generateFile($filename, $file_path, $keys, $contacts)
    {
        $now = Carbon::now()->format("d_M_Y_H:i:s");
        $filename = "{$filename}_{$now}";

        $header = collect($keys)->map(function ($el) {
            return collect(explode('_', $el))->map(function ($word) {
                return ucfirst($word);
            })->implode(' ');
        });

        $excel = new PHPExcel();
        $excel->getProperties()->setCreator("System")->setTitle($filename);
        $excel->setActiveSheetIndex(0);
        $excel->getActiveSheet()->fromArray($header->toArray(), null, 'A1');

        $i = 2;
        foreach ($contacts as $contact) {
            $header->each(function ($title, $index) use ($i, $excel, $contact, $keys) {
                $excel->getActiveSheet()->setCellValue(chr(65 + $index) . $i, $contact->{$keys[$index]});
            });
            $i++;
        }

        $excel_writer = PHPExcel_IOFactory::createWriter($excel, 'CSV');
        $excel_writer->save("{$file_path}{$filename}.csv");

        return "{$filename}.csv";
    }

    private function generateExcel($result) {
        $now = Carbon::now()->format("d_M_Y_H:i:s");
        $filename = "Fiau_{$now}";

        $header = ['Request', 'Value'];

        $excel = new PHPExcel();
        $excel->getProperties()->setCreator("System")->setTitle($filename);

        $excel->setActiveSheetIndex(0);
        $excel->getActiveSheet()->fromArray($header, null, 'A1');

        $i = 2;
        foreach ($result as $row) {
            $excel->getActiveSheet()
                ->setCellValue("A{$i}", $row[0])
                ->setCellValue("B{$i}", $row[1]);
            $i++;
        }

        $excel_writer = PHPExcel_IOFactory::createWriter($excel, 'OpenDocument');
        $file_path = getenv('STORAGE_PATH') . "/fiau/";

        if (!file_exists($file_path)) {
            mkdir($file_path, 0777, true);
        }
        $excel_writer->save("{$file_path}{$filename}.ods");
        return true;
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return int|void|null
     * @throws \Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        echo "Started \n";
        $result = [];

        $result[] = [$v = "7.4", $k = $this->do_7_4()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "7.15", $k = $this->do_7_15()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "7.16", $k = $this->do_7_16()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "7.17", $k = $this->do_7_17()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "7.18", $k = $this->do_7_18()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.21", $k = $this->do_11_21()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.22", $k = $this->do_11_22()];
        echo "Finished $v: $k \n";

        list($do_11_23, $do_11_24) = $this->do_11_23_24();
        $result[] = [$v = "11.23", $k = $do_11_23];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.24", $k = $do_11_24];
        echo "Finished $v: $k \n";

        $result[] = [$v = "11.31", $k = $this->do_11_31()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.32", $k = $this->do_11_32()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.33", $k = $this->do_11_33()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.34", $k = $this->do_11_34()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.35", $k = $this->do_11_35()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.36", $k = $this->do_11_36()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.37", $k = $this->do_11_37()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.38", $k = $this->do_11_38()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "11.39", $k = $this->do_11_39()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.1", $k = $this->do_12_1()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.3", $k = $d_12_3 = $this->do_12_3()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.4", $k = $d_12_4 = $this->do_12_4()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.5", $k = (100 - $d_12_3 - $d_12_4)];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.7", $k = $this->do_12_7()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.13", $k = $this->do_12_13()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.20a", $k = $this->do_12_20_a()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.20b", $k = $this->do_12_20_b()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.20d", $k = $this->do_12_20_d()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.20e", $k = $this->do_12_20_e()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.20g", $k = $this->do_12_20_g()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "12.20k", $k = $this->do_12_20_k()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "13.1", $k = $this->do_13_1()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "13.2", $k = $this->do_13_2()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "13.3", $k = $this->do_13_3()];
        echo "Finished $v: $k \n";
        $result[] = [$v = "13.4", $k = $this->do_13_4()];
        echo "Finished $v: $k \n";

        $this->generateExcel($result);

        return 0;
    }
}
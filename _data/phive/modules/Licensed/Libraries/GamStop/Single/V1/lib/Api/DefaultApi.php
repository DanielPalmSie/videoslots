<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * gamtest
 *
 * Search for a person
 *
 * OpenAPI spec version: 2.0.0
 * Contact: admin@gambusters.co.uk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation rootPost
     *
     * Search for person
     *
     * @param array $params
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function rootPost($params)
    {
        list($response, $statusCode, $httpHeader) = $this->rootPostWithHttpInfo($params['first_name'], $params['last_name'], $params['date_of_birth'], $params['email'], $params['postcode'], $params['x_trace_id']);

        return compact('response', 'statusCode', 'httpHeader');
    }

    /**
     * Operation rootPostWithHttpInfo
     *
     * Search for person
     *
     * @param string $first_name First name of person, only 20 characters are significant (required)
     * @param string $last_name Last name of person, only 20 characters are significant (required)
     * @param string $date_of_birth Date of birth in ISO format (yyyy-mm-dd) (required)
     * @param string $email Email address (required)
     * @param string $postcode Postcode - spaces not significant (required)
     * @param string $x_trace_id A freeform field that is put into the audit log that can be used by the caller to identify a request.  This might be something to indicate the person being checked (in some psuedononymous fashion), a unique request ID, GUID, or a trace ID from a system such as zipkin (optional)
     * @param string $resourcePath I have no clue what is this
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function rootPostWithHttpInfo($first_name, $last_name, $date_of_birth, $email, $postcode, $x_trace_id = null, $resourcePath = '')
    {
        // verify the required parameter 'first_name' is set
        if ($first_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter first name when calling Gamstop API');
        }
        if ((strlen($first_name) > 60)) {
            throw new \InvalidArgumentException('Invalid length for first name when calling Gamstop API, must be smaller than or equal to 60.');
        }
        if ((strlen($first_name) < 2)) {
            throw new \InvalidArgumentException('Invalid length for first name when calling Gamstop API, must be bigger than or equal to 2.');
        }

        // verify the required parameter 'last_name' is set
        if ($last_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter last name when calling Gamstop API');
        }
        if ((strlen($last_name) > 60)) {
            throw new \InvalidArgumentException('Invalid length for last name when calling Gamstop API, must be smaller than or equal to 60.');
        }
        if ((strlen($last_name) < 2)) {
            throw new \InvalidArgumentException('Invalid length for last name when calling Gamstop API, must be bigger than or equal to 2.');
        }

        // verify the required parameter 'date_of_birth' is set
        if ($date_of_birth === null) {
            throw new \InvalidArgumentException('Missing the required parameter date of birth when calling Gamstop API');
        }
        if ((strlen($date_of_birth) > 10)) {
            throw new \InvalidArgumentException('Invalid length for date of birth when calling Gamstop API, must be smaller than or equal to 10.');
        }
        if ((strlen($date_of_birth) < 10)) {
            throw new \InvalidArgumentException('Invalid length for date of birth when calling Gamstop API, must be bigger than or equal to 10.');
        }
        $date_array = explode('-', $date_of_birth);
        if (!checkdate($date_array[1], $date_array[2], $date_array[0])) {
            throw new \InvalidArgumentException("Invalid value for date of birth when calling Gamstop API, must conform to the pattern /yyyy-mm-dd/.");
        }

        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter email when calling Gamstop API');
        }
        // verify the required parameter 'postcode' is set
        if ($postcode === null) {
            throw new \InvalidArgumentException('Missing the required parameter post code when calling Gamstop API');
        }
        if ((strlen($postcode) > 10)) {
            throw new \InvalidArgumentException('Invalid length for post code when calling Gamstop API, must be smaller than or equal to 10.');
        }
        if ((strlen($postcode) < 5)) {
            throw new \InvalidArgumentException('Invalid length for post code when calling Gamstop API, must be bigger than or equal to 5.');
        }

        if (!is_null($x_trace_id) && (strlen($x_trace_id) > 40)) {
            throw new \InvalidArgumentException('Invalid length for x_trace_id when calling Gamstop API, must be smaller than or equal to 40.');
        }

        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/x-www-form-urlencoded']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // header params
        if ($x_trace_id !== null) {
            $headerParams['X-Trace-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_trace_id);
        }
        // form params
        if ($first_name !== null) {
            $formParams['firstName'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($last_name !== null) {
            $formParams['lastName'] = $this->apiClient->getSerializer()->toFormValue($last_name);
        }
        // form params
        if ($date_of_birth !== null) {
            $formParams['dateOfBirth'] = $this->apiClient->getSerializer()->toFormValue($date_of_birth);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        // form params
        if ($postcode !== null) {
            $formParams['postcode'] = $this->apiClient->getSerializer()->toFormValue($postcode);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
